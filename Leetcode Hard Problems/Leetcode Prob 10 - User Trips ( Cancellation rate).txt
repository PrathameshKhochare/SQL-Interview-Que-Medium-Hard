/*Leetcode Hard Prob 10 - Write the sql query to find the cancellation rate of the requests with the unbanned users 
(both clients and users must be not banned) each day between '2013-10-01' and '2013-10-03' , 
round cancellation rate to two decimal points. */
==========================================
	
Create table  Trips (id int, client_id int, driver_id int, city_id int, status varchar(50), request_at varchar(50));
Create table Users (users_id int, banned varchar(50), role varchar(50));
Truncate table Trips;
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('1', '1', '10', '1', 'completed', '2013-10-01');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('2', '2', '11', '1', 'cancelled_by_driver', '2013-10-01');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('3', '3', '12', '6', 'completed', '2013-10-01');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('4', '4', '13', '6', 'cancelled_by_client', '2013-10-01');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('5', '1', '10', '1', 'completed', '2013-10-02');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('6', '2', '11', '6', 'completed', '2013-10-02');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('7', '3', '12', '6', 'completed', '2013-10-02');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('8', '2', '12', '12', 'completed', '2013-10-03');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('9', '3', '10', '12', 'completed', '2013-10-03');
insert into Trips (id, client_id, driver_id, city_id, status, request_at) values ('10', '4', '13', '12', 'cancelled_by_driver', '2013-10-03');
Truncate table Users;
insert into Users (users_id, banned, role) values ('1', 'No', 'client');
insert into Users (users_id, banned, role) values ('2', 'Yes', 'client');
insert into Users (users_id, banned, role) values ('3', 'No', 'client');
insert into Users (users_id, banned, role) values ('4', 'No', 'client');
insert into Users (users_id, banned, role) values ('10', 'No', 'driver');
insert into Users (users_id, banned, role) values ('11', 'No', 'driver');
insert into Users (users_id, banned, role) values ('12', 'No', 'driver');
insert into Users (users_id, banned, role) values ('13', 'No', 'driver');	

------------
select * from trips;
select * from users;

/*Q -Write the sql query to find the cancellation rate of the requests with the unbanned users 
(both clients and users must be not banned) each day between '2013-10-01' and '2013-10-03' , 
round cancellation rate to two decimal points. */

--Ans (using cte's)
with unbanned_client as (
		select *
		from users
		where banned = 'No' and role = 'client'
)
,unbanned_drivers as (
		select *
		from users
		where banned = 'No' and role = 'driver'
)
,combined_cte as (
select request_at , count(status) over(partition by request_at) as daily_cnt
	, case when status = 'completed' then 0 else 1 end as flag
from trips t
join unbanned_client c on t.client_id = c.users_id
join unbanned_drivers d on t.driver_id = d.users_id
)
select request_at , round(100.0* sum(flag)::decimal / max(daily_cnt),2) as cancellation_rate
from combined_cte
group by request_at



Ans -  
/* we first find out unbanned users from users table
   then we join trips table with unbanned_users table 2 times on both client_id and driver_id to get all records of client and drivers
   then we find out daily cancelled_trips , using count and case statements by grouping data on daily_trips
*/
with unbanned_users as (
select * from users where banned = 'No'
)
select t.request_at , count(status) as total_rides , sum(case when status like 'cancelled%' then 1 else 0 end )as total_cancelled
, round  (100.0 *sum(case when status like 'cancelled%' then 1 else 0 end ) / count(status) ,2) as cancellation_rate
from trips t
join unbanned_users u
on t.client_id = u.users_id
join unbanned_users v
on t.driver_id = v.users_id
group by t.request_at


---------- or

select t.request_at, count(1) as total_request,
   count(case when t.status in ('cancelled_by_driver','cancelled_by_client') then 1 else null end) as total_cancellation
   , round(1.0 * count(case when t.status in ('cancelled_by_driver','cancelled_by_client') then 1 else null end) / count(1)* 100,2) as cancellation_rate
from trips t 
join users c on t.client_id = c.users_id
join users d on t.driver_id = d.users_id
where c.banned = 'No' and d.banned = 'No'
group by t.request_at
order by t.request_at
---------------------------------------------- end