/* Uplers SQL Interview
An organisatin is looking for hire emp for their junior and senior positions. They have total quata of 50000 $ .
they have to 1st fill up the senior pos and then junior pos . 
write query to pass below 4 test cases .
*/

script:
Create table candidates(
id int primary key,
positions varchar(10) not null,
salary int not null);

--test case 1:
insert into candidates values(1,'junior',5000);
insert into candidates values(2,'junior',7000);
insert into candidates values(3,'junior',7000);
insert into candidates values(4,'senior',10000);
insert into candidates values(5,'senior',30000);
insert into candidates values(6,'senior',20000);

select * from candidates

--------
with cte as (
	select * ,sum(salary) over(partition by positions order by salary,id) as cumm_salary
	from candidates
)
,senior_budget as (
	select count(*) as seniors , sum(salary) as total_senior_budeet
	from cte
	where positions = 'senior' and cumm_salary <= 50000
	)
--select * from senior_budget
,junior_budget as (
	select  count(*) as juniors , sum(salary) as junior_salary
	from cte
	where positions = 'junior' and cumm_salary <= 50000 - (select total_senior_budeet from senior_budget)
	)
--select * from junior_budget
select seniors , juniors
from senior_budget , junior_budget


------- test case 2
delete from candidates
insert into candidates values(20,'junior',10000);
insert into candidates values(30,'senior',15000);
insert into candidates values(40,'senior',30000);

select * from candidates

--(above solution passes the test case , senior - 2 , junior - 0)


----------test case 3:  (senior - 0 , junior - 3)
delete from candidates

insert into candidates values(1,'junior',15000);
insert into candidates values(2,'junior',15000);
insert into candidates values(3,'junior',20000);
insert into candidates values(4,'senior',60000);

select * from candidates

-------- we need to handle null value in senior_budget cte to get total_senior_budeet as zero instead of null as sum(salary) > 50000
with cte as (
	select * ,sum(salary) over(partition by positions order by salary,id) as cumm_salary
	from candidates
)
,senior_budget as (
	select count(*) as seniors , coalesce(sum(salary),0) as total_senior_budeet
	from cte
	where positions = 'senior' and cumm_salary <= 50000
	)
--select * from senior_budget
,junior_budget as (
	select  count(*) as juniors , sum(salary) as junior_salary
	from cte
	where positions = 'junior' and cumm_salary <= 50000 - (select total_senior_budeet from senior_budget)
	)
--select * from junior_budget
select seniors , juniors
from senior_budget , junior_budget


-------------test case 4:  (senior - 2 , junior - 2)
delete from candidates

insert into candidates values(10,'junior',10000);
insert into candidates values(40,'junior',10000);
insert into candidates values(20,'senior',15000);
insert into candidates values(30,'senior',30000);
insert into candidates values(50,'senior',15000);

select * from candidates

--(above solution passes the test case , senior - 2 , junior - 2)

--------------------------------------- end