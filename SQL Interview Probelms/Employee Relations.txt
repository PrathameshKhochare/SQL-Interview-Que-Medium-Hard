-- Q. Advance SQL Query (Employee Relations)
--Q.- By reffering below tables, give belo o/p ,when emp available under post then given emp_name else give 'vacant' as name as per total_posts count
--create below output
--id      title         total_post  rn    name
1	   "General manager"	1	   1	"John Smith"
2	    "Manager"	       5	   1	"Jane Doe"
2	"Manager"	5	2	"Michael Brown"
2	"Manager"	5	3	"Emily Johnson"
2	"Manager"	5	4	"Vacant"
2	"Manager"	5	5	"Vacant"
3	"Asst. Manager"	10	1	"William Lee"
3	"Asst. Manager"	10	2	"Jessica Clark"
3	"Asst. Manager"	10	3	"Christopher Harris"
3	"Asst. Manager"	10	4	"Olivia Wilson"
3	"Asst. Manager"	10	5	"Daniel Martinez"
3	"Asst. Manager"	10	6	"Sophia Miller"
3	"Asst. Manager"	10	7	"Vacant"
3	"Asst. Manager"	10	8	"Vacant"
3	"Asst. Manager"	10	9	"Vacant"
3	"Asst. Manager"	10	10	"Vacant"
--------------------------------------

create table job_positions (id  int,
                                             title varchar(100),
                                              groups varchar(10),
                                              levels varchar(10),     
                                               payscale int, 
                                               totalpost int );
 insert into job_positions values (1, 'General manager', 'A', 'l-15', 10000, 1); 
insert into job_positions values (2, 'Manager', 'B', 'l-14', 9000, 5); 
insert into job_positions values (3, 'Asst. Manager', 'C', 'l-13', 8000, 10);  

 create table job_employees ( id  int, 
                              name varchar(100),     
                              position_id  int 
                                    );  
  insert into job_employees values (1, 'John Smith', 1); 
insert into job_employees values (2, 'Jane Doe', 2);
 insert into job_employees values (3, 'Michael Brown', 2);
 insert into job_employees values (4, 'Emily Johnson', 2); 
insert into job_employees values (5, 'William Lee', 3); 
insert into job_employees values (6, 'Jessica Clark', 3); 
insert into job_employees values (7, 'Christopher Harris', 3);
 insert into job_employees values (8, 'Olivia Wilson', 3);
 insert into job_employees values (9, 'Daniel Martinez', 3);
 insert into job_employees values (10, 'Sophia Miller', 3)
 
select * from job_positions
select * from job_employees


------------------------- using recursive cte
with recursive cte as (
	select id ,title , totalpost , 1 as rn from job_positions
	union 
	select id ,title , totalpost , rn + 1 as rn from cte
	where rn < totalpost
)
,cte2 as (
	select * , row_number() over (partition by position_id order by id) as rn
	from job_employees
)

select cte.* , coalesce(cte2.name ,'Vacant') as name
from cte
left join cte2 
on cte.id = cte2.position_id and cte.rn = cte2.rn
order by cte.id , cte.rn

------------------- or  (using row_number)
select * from job_positions
select * from job_employees

with cte as (
		select generate_series(min(totalpost) , max(totalpost) ,1) as rn
		from job_positions
	)
,cte2 as (
	select * , row_number() over (partition by position_id order by id) as rn
	from job_employees
)
select p.* , coalesce(cte2.name,'vacant') as name
from job_positions p
join cte c on p.totalpost >= c.rn
left join cte2  on cte2.position_id = p.id  and cte2.rn = c.rn
order by p.id , p.totalpost

--------------------- end