------------- Test sample
drop table users ;
script:
CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

drop table if exists logins
CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP TIMESTAMP NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);

INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);


-- 2024 Q1
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);

INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);

------------
select * from USERS
select * from LOGINS

-- Q. Management wants to see all users that did not login in the past 5 months
--return - username
--- Q . past 5 months from current date ( date less than 2024-02-19 )

select distinct u.user_name  
from LOGINS l 
join USERS u on l.user_id = u.user_id
where l.user_id not in 
(
select distinct user_id
from LOGINS 
where  age(current_date  , login_timestamp::date ) < '5 mons'
)

--------------- or

select u.user_name, max(LOGIN_TIMESTAMP)::date as last_login
from LOGINS l
join USERS u on l.user_id = u.user_id
group by u.user_name	
having current_date - interval '5 months' > max(LOGIN_TIMESTAMP)::date
order by u.user_name

--------- or
select distinct u.user_name
from LOGINS l
join USERS u on l.user_id = u.user_id
where l.user_id not in 
(
select user_id
from LOGINS l
where LOGIN_TIMESTAMP::date >  current_date - interval '5 months'
)
---------------------- end
select * from USERS
select * from LOGINS

--Q.2 For the business units quarterly analysis, calculate how many users and how many sessions were at each quarter 
-- order by quarter by newest to oldest
-- return - first day of quarter , user_cnt , session_cnt

select extract(quarter from LOGIN_TIMESTAMP::date) as quarter_num , count(session_id) as session_cnt , count(distinct user_id) as user_cnt
--,min(LOGIN_TIMESTAMP::date) as min_quarter_date 
, date_trunc('quarter' ,min(LOGIN_TIMESTAMP))::date as first_quarter_date
from LOGINS
group by extract(quarter from LOGIN_TIMESTAMP::date)
order by quarter_num desc
------------------------------ end

select * from USERS
select * from LOGINS

--Q 3. Display user id's that log-in in Jan 2024 and did not log-in on nov 2023
-- return user_id


select distinct user_id
from LOGINS
where extract(year from LOGIN_TIMESTAMP::date) = '2024' and  extract(month from LOGIN_TIMESTAMP::date) = '1' 
      and user_id not in (select distinct user_id from LOGINS
						  where extract(year from LOGIN_TIMESTAMP::date) = '2023' and  extract(month from LOGIN_TIMESTAMP::date) = '11'
						  )
order by user_id , LOGIN_TIMESTAMP::date

-------or
select distinct user_id
from LOGINS
where LOGIN_TIMESTAMP::date between '2024-01-01' and  '2024-01-31' 
      and user_id not in (select distinct user_id from LOGINS
						  where LOGIN_TIMESTAMP::date between '2023-11-01' and  '2023-11-30' 
						  )
order by user_id

-------------------- end

select * from USERS
select * from LOGINS
-- Q4 Add to the query from 2 the percentage change in sessions from last quarter
-- Return 1st day of the quarter , session cnt , session_cnt_prev , session_percent_change

with cte as (
select extract(quarter from LOGIN_TIMESTAMP::date) as quarter_no , count(session_id) as session_cnt --, min(LOGIN_TIMESTAMP::date)
,date_trunc('quarter' ,min(LOGIN_TIMESTAMP))::date as first_quarter_date
--, row_number() over(order by extract(quarter from LOGIN_TIMESTAMP::date)desc) as rn
from LOGINS
group by extract(quarter from LOGIN_TIMESTAMP::date)
--order by extract(quarter from LOGIN_TIMESTAMP::date)
	)
select first_quarter_date , quarter_no ,session_cnt , lag(session_cnt,1,0) over(order by first_quarter_date) as session_cnt_prev
, round(100.0*((session_cnt - lag(session_cnt,1) over(order by first_quarter_date))::decimal/  lag(session_cnt,1,0) over(order by first_quarter_date)),2) as session_percent_change
from cte

------------------ end
select * from USERS
select * from LOGINS
--Q5 Display the user that had the highest session score(max) for each day
-- Return Date , username , score

with cte as (
select LOGIN_TIMESTAMP::date ,  u.user_name , sum(session_score) as max_daily_user_score
		from LOGINS l
		join USERS u
		on l.user_id = u.user_id
		group by LOGIN_TIMESTAMP::date ,  u.user_name
		order by LOGIN_TIMESTAMP::date ,  u.user_name
)
select * from (
select * , rank() over(partition by LOGIN_TIMESTAMP order by max_daily_user_score desc) as rn
from cte 
	)a
where rn = 1

------------------------------ end
select * from USERS
select * from LOGINS
--Q. 6 To Identify our best users - Return the users that had a session on every single day since their 1st login.
--(make assumptions if needed)
-- return - user_id

select * from LOGINS 
order by LOGIN_TIMESTAMP

------------------ ans
with cte as (
select user_id , LOGIN_TIMESTAMP::date
, lead(LOGIN_TIMESTAMP::date ,1) over(partition by user_id order by LOGIN_TIMESTAMP::date ) as next_cons_day
--,row_number() over(partition by user_id order by  LOGIN_TIMESTAMP::date) as rn
from LOGINS
--order by user_id , LOGIN_TIMESTAMP::date
)
select distinct user_id from (
select * , next_cons_day - LOGIN_TIMESTAMP
from cte 
where next_cons_day - LOGIN_TIMESTAMP = 1
)x

--- another approach
select user_id 
--, min(LOGIN_TIMESTAMP::date) as login_date ,age('2024-06-28', min(LOGIN_TIMESTAMP::date))+ interval '1 day' as total_cons_days_required
--,count(LOGIN_TIMESTAMP::date) as cons_days
from LOGINS
group by user_id 
having  extract ( day from age('2024-06-28', min(LOGIN_TIMESTAMP::date))+ interval '1 day') = count(LOGIN_TIMESTAMP::date)
--order by user_id , login_date

------------------------------------ end
select * from USERS
select * from LOGINS
--Q. 7 On what dates there were no log-in at all ?
--return Login_dates
with cte as (
select  min(LOGIN_TIMESTAMP::date) as first_login ,  max(LOGIN_TIMESTAMP::date) as last_login 
from LOGINS
	)
,cte2 as (	
select generate_series(first_login , last_login,'1 day')::date as total_days from cte)
select * from cte2
where total_days 
not in (select distinct LOGIN_TIMESTAMP::date from logins)
-- 350 - 24 = 326

------------ or 
with recursive cte as (
	select  min(LOGIN_TIMESTAMP::date) as first_login ,  max(LOGIN_TIMESTAMP::date) as last_login 
from LOGINS
	union all
select (first_login + interval '1 day')::date  as first_login  , last_login
	from cte
where first_login < last_login	
)
select *
from cte
where first_login 
not in (select distinct LOGIN_TIMESTAMP::date from logins)

------------------- end