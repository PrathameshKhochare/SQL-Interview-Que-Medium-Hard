/* Swiggy SQL Que
Find out supplier_id, product_id , no_of_days and starting date of record_date 
for which stock quentity is less than 50 for 2 or more cons days */


-- Create the table
CREATE TABLE stock (
    supplier_id INT,
    product_id INT,
    stock_quantity INT,
    record_date DATE
);

-- Insert the data
delete from stock;
INSERT INTO stock (supplier_id, product_id, stock_quantity, record_date)
VALUES
    (1, 1, 60, '2022-01-01'),
    (1, 1, 40, '2022-01-02'),
    (1, 1, 35, '2022-01-03'),
    (1, 1, 45, '2022-01-04'),
 (1, 1, 51, '2022-01-06'),
 (1, 1, 55, '2022-01-09'),
 (1, 1, 25, '2022-01-10'),
    (1, 1, 48, '2022-01-11'),
 (1, 1, 45, '2022-01-15'),
    (1, 1, 38, '2022-01-16'),
    (1, 2, 45, '2022-01-08'),
    (1, 2, 40, '2022-01-09'),
    (2, 1, 45, '2022-01-06'),
    (2, 1, 55, '2022-01-07'),
    (2, 2, 45, '2022-01-08'),
 (2, 2, 48, '2022-01-09'),
    (2, 2, 35, '2022-01-10'),
 (2, 2, 52, '2022-01-15'),
    (2, 2, 23, '2022-01-16');

select * from stock

/* we will 1st create rank to sort the data by supplier_id, product_id grp and asc manner of record_date
and take day_diff beten record_date and prev_date also apply condn of stock_quen < 50

we will find out the consecutive days by day_diff col , we grp the data based on condn of day_diff <=1 then 0 else 1 as flag ,
and apply window fun sum(on this condition) to create groups of cons days

at last , we count(total_days) by grouping data on grp_dates
*/
------------------
with cte as (
	select * , rank() over(partition by supplier_id, product_id order by record_date ) as rn
	, lag(record_date,1,record_date) over(partition by supplier_id, product_id order by record_date) as prev_day 
	,record_date -  lag(record_date,1,record_date) over(partition by supplier_id, product_id order by record_date) as day_diff
	from stock
	where stock_quantity < 50
	)
,cte2 as (	
	select * , case when day_diff <= 1 then 0 else 1 end as grp_flag
	,sum(case when day_diff <= 1 then 0 else 1 end) over(partition by supplier_id, product_id order by record_date ) as grp_id
	from cte
	)
select supplier_id, product_id --, grp_id 
, min(record_date) as first_date , count(record_date) as no_of_days
from cte2
group by supplier_id, product_id , grp_id
having count(record_date) > 1
order by supplier_id, product_id , first_date

---------- end