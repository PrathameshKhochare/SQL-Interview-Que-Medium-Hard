/* Q. From the given table , form the query to get below output
o/p
car             length  width  height
"Kia Sportage"	  12	  15	18
*/ 

DROP TABLE IF EXISTS FOOTER;
CREATE TABLE FOOTER 
(
	id 			INT PRIMARY KEY,
	car 		VARCHAR(20), 
	length 		INT, 
	width 		INT, 
	height 		INT
);

INSERT INTO FOOTER VALUES (1, 'Hyundai Tucson', 15, 6, NULL);
INSERT INTO FOOTER VALUES (2, NULL, NULL, NULL, 20);
INSERT INTO FOOTER VALUES (3, NULL, 12, 8, 15);
INSERT INTO FOOTER VALUES (4, 'Toyota Rav4', NULL, 15, NULL);
INSERT INTO FOOTER VALUES (5, 'Kia Sportage', NULL, NULL, 18); 

SELECT * FROM FOOTER;


--------- ans
-- solution1 - as we require last non null values for each column, we will find out last non null record for each column and
--- then use subquery to join all reords from all columns using cross join
select * from
(select car from FOOTER where car is not null order by id desc limit 1 ) car
cross join( select length from FOOTER where length is not null order by id desc limit 1) length
cross join( select width from FOOTER where width is not null order by id desc limit 1) width
cross join( select height from FOOTER where height is not null order by id desc limit 1) height


-------- solution 2 -- we will use case when along with window function 
---- 1st make flag for each column and then partition the rows until next non null values
with cte as(
select *
--, case when car is not null then 1 else 0 end as car_flag
,sum(case when car is not null then 1 else 0 end) over(order by id ) as car_count
--, case when length is not null then 1 else 0 end as length_flag
,sum(case when length is not null then 1 else 0 end) over(order by id ) as length_count
---, case when width is not null then 1 else 0 end as width_flag
,sum(case when width is not null then 1 else 0 end) over(order by id) as width_count
--, case when height is not null then 1 else 0 end as height_flag
,sum(case when height is not null then 1 else 0 end) over(order by id) as height_count
from FOOTER
)
select 
first_value(car) over(partition by car_count order by id  ) as updated_car
,first_value(length) over(partition by length_count order by id ) as updated_length
,first_value(width) over(partition by width_count order by id ) as updated_width
,first_value(height) over(partition by height_count order by id ) as updated_height
from cte 
order by id desc
limit 1


--------------------- or
-- ( logic - upto specific car/column_name we are counting the rows and then finding first_value of that range and finally flip the table to get last record as 1st 
--------and limit only 1 record)
with cte as(
select * 
, count(car) over(order by id) as car_rn
, count(length) over(order by id) as length_rn
, count(width) over(order by id) as width_rn
, count(height) over(order by id) as height_rn
from FOOTER
)
SELECT first_value(car)OVER(PARTITION BY car_rn ORDER BY id) AS car_updated,
first_value(length)OVER(PARTITION BY length_rn ORDER BY id) AS lenth_updated,
first_value(width)OVER(PARTITION BY width_rn ORDER BY id) AS width_updated,
first_value(height)OVER(PARTITION BY height_rn ORDER BY id) AS height_updated
FROM cte
order by id desc
limit 1
