/* Q. 12 - Split Hirarchy
PROBLEM STATEMENT: 
Given graph shows the hierarchy of employees in a company. 
Write an SQL query to split the hierarchy and show the employees corresponding to their team.

EXPECTED OUTPUT:
TEAMS	MEMBERS
Team 1	Elon, Bret, Mark, Phil, Jon
Team 2	Elon, Earl, Omid
Team 3	Elon, Ira, James, Drew

*/


DROP TABLE IF EXISTS company;
CREATE TABLE company
(
	employee	varchar(10) primary key,
	manager		varchar(10)
);

INSERT INTO company values ('Elon', null);
INSERT INTO company values ('Ira', 'Elon');
INSERT INTO company values ('Bret', 'Elon');
INSERT INTO company values ('Earl', 'Elon');
INSERT INTO company values ('James', 'Ira');
INSERT INTO company values ('Drew', 'Ira');
INSERT INTO company values ('Mark', 'Bret');
INSERT INTO company values ('Phil', 'Mark');
INSERT INTO company values ('Jon', 'Mark');
INSERT INTO company values ('Omid', 'Earl');

SELECT * FROM company;

--------------- top hirarchy
with cte_teams as(
	select mng.employee , mng.manager , concat('Team ',row_number() over( order by mng.employee)) as teams
	from company root
	join company mng
	on root.employee = mng.manager       -- manager of 1st hiarchy is employee of root node
	where root.manager is null           -- 1st level of hirarchy , manager of root is null as root is the manager of 2nd level
)
---------------------------
with recursive cte as(
	select c.employee , c.manager ,t.teams
	from company c
	cross join cte_teams t               -- cross join to get diff teams for same manager
	where c.manager is null              -- 1st level hirarchy
	
union
	select c.employee , c.manager 
	, coalesce(t.teams , cte.teams) as teams
	from company c
	join cte 
	on cte.employee = c.manager          -- 2nd onwards level of hirarchy
	left join cte_teams t 
	on c.employee = t.employee           -- to get teams name of emp
	)
,cte_teams as(
	select mng.employee , mng.manager , concat('Team ',row_number() over( order by mng.employee)) as teams
	from company root
	join company mng
	on root.employee = mng.manager       -- manager of 1st hiarchy is employee of root node
	where root.manager is null
   )
select teams , string_agg(employee , ' ,') 
from cte
group by teams
order by teams


----------------- or
---- 1st calculate 1st level of hirirchy i.e employees under root manager

       select mng.employee as emp , concat('Team ' ,row_number() over(order by mng.employee)) as teams
       from company root
       join company mng
       on root.employee = mng.manager  
       where root.manager is null        
 --------------------------------------------       

with recursive cte as(
      select c.employee , c.manager , t.teams
	from company c
	cross join cte_teams  t
	 where c.manager is null
	
	union 
	select c.employee ,  c.manager 
	, case when t.teams is not null then t.teams
	         else case when c.manager = cte.employee then cte.teams end end as teams
	
	--,coalesce(t.teams ,cte.teams) as teams
	from cte
	join company c on cte.employee = c.manager
	left join cte_teams t on c.employee = t.emp
	
	)
,cte_teams as(
       select mng.employee as emp , concat('Team ' ,row_number() over(order by mng.employee)) as teams
       from company root
       join company mng
       on root.employee = mng.manager  
       where root.manager is null        
        )	
select teams , string_agg(employee,', ')
from cte
group by teams
order by teams

------------------------------ end